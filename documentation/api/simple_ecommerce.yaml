---
openapi: 3.1.0
info:
  title: Simple E-Commerce - OpenAPI 3.1
  description: |-
    This is a simple E-commerce Application based on the OpenAPI 3.1 specification.
    <br>Some useful links:
    - [The Simple E-Commerce repository](https://github.com/enok/simple-ecommerce)
    - [The source API definition for the Simple E-Commerce](https://github.com/enok/simple-ecommerce/tree/main/documentation/simple_ecommerce.yaml)
  contact:
    email: enok.jesus@gmail.com
  version: 1.0.0
servers:
- url: http://localhost:8080/api
tags:
- name: products
  description: Products operations
- name: order
  description: Orders operations
- name: order-item
  description: Operations about order-item
paths:
  /products:
    get:
      tags:
      - products
      summary: Get a list of all products
      description: Get a list of all products
      operationId: getProducts
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                  - name
                  - quantity
                  - price
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 1
                    name:
                      type: string
                      example: tv
                    description:
                      type: string
                      example: television
                    quantity:
                      type: integer
                      format: int64
                      example: 5
                    price:
                      type: number
                      format: double
                      example: 100
                  xml:
                    name: product
            application/xml:
              schema:
                type: array
                items:
                  required:
                  - name
                  - quantity
                  - price
                  type: object
                  properties:
                    id:
                      type: integer
                      format: int64
                      example: 1
                    name:
                      type: string
                      example: tv
                    description:
                      type: string
                      example: television
                    quantity:
                      type: integer
                      format: int64
                      example: 5
                    price:
                      type: number
                      format: double
                      example: 100
                  xml:
                    name: product
                xml:
                  name: products
                  wrapped: true
          description: Successful operation
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
                xml:
                  name: error
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
                xml:
                  name: error
        "414":
          description: Request-URI Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
                xml:
                  name: error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
                xml:
                  name: error
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
                xml:
                  name: error
    post:
      tags:
      - products
      summary: Create a new product
      description: Create a new product
      operationId: addProduct
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
          application/xml:
            schema:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
        description: Create a new product
      responses:
        "200":
          content:
            application/json:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
            application/xml:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
          description: Successful operation
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
                xml:
                  name: error
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
                xml:
                  name: error
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
                xml:
                  name: error
        "413":
          description: Request Entity Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 413
                  message:
                    type: string
                    example: Request Entity Too Large
                  detailedMessage:
                    type: string
                    example: Payload limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 413
                  message:
                    type: string
                    example: Request Entity Too Large
                  detailedMessage:
                    type: string
                    example: Payload limits check failed.
                xml:
                  name: error
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 415
                  message:
                    type: string
                    example: Unsupported Media Type
                  detailedMessage:
                    type: string
                    example: Unsupported Media Type.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 415
                  message:
                    type: string
                    example: Unsupported Media Type
                  detailedMessage:
                    type: string
                    example: Unsupported Media Type.
                xml:
                  name: error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
                xml:
                  name: error
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
                xml:
                  name: error
  /products/{id}:
    get:
      tags:
      - products
      summary: Get a product by ID
      description: Get a product by ID
      operationId: getProductById
      parameters:
      - name: id
        in: path
        description: ID of product
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          content:
            application/json:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
            application/xml:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
          description: Successful operation
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
                xml:
                  name: error
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
                xml:
                  name: error
        "414":
          description: Request-URI Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
                xml:
                  name: error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
                xml:
                  name: error
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
                xml:
                  name: error
    put:
      tags:
      - products
      summary: Update an existing product
      description: Update an existing product
      operationId: updateProduct
      parameters:
      - name: id
        in: path
        description: ID of product
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
          application/xml:
            schema:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
        description: Update an existing product
      responses:
        "200":
          content:
            application/json:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
            application/xml:
              schema:
                required:
                - name
                - quantity
                - price
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 1
                  name:
                    type: string
                    example: tv
                  description:
                    type: string
                    example: television
                  quantity:
                    type: integer
                    format: int64
                    example: 5
                  price:
                    type: number
                    format: double
                    example: 100
                xml:
                  name: product
          description: Successful operation
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
                xml:
                  name: error
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
                xml:
                  name: error
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 406
                  message:
                    type: string
                    example: Request Not Acceptable
                  detailedMessage:
                    type: string
                    example: Requested content type not acceptable.
                xml:
                  name: error
        "413":
          description: Request Entity Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 413
                  message:
                    type: string
                    example: Request Entity Too Large
                  detailedMessage:
                    type: string
                    example: Payload limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 413
                  message:
                    type: string
                    example: Request Entity Too Large
                  detailedMessage:
                    type: string
                    example: Payload limits check failed.
                xml:
                  name: error
        "414":
          description: Request-URI Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
                xml:
                  name: error
        "415":
          description: Unsupported Media Type
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 415
                  message:
                    type: string
                    example: Unsupported Media Type
                  detailedMessage:
                    type: string
                    example: Unsupported Media Type.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 415
                  message:
                    type: string
                    example: Unsupported Media Type
                  detailedMessage:
                    type: string
                    example: Unsupported Media Type.
                xml:
                  name: error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
                xml:
                  name: error
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
                xml:
                  name: error
    delete:
      tags:
      - products
      summary: Delete a product by ID
      description: Delete a product by ID
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: ID of product
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "204":
          description: Successful operation
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 400
                  message:
                    type: string
                    example: Bad Request
                  detailedMessage:
                    type: string
                    example: Bad Request.
                  detailedErrors:
                    type: array
                    items:
                      type: string
                      example: Name is mandatory
                      xml:
                        name: detailedError
                    xml:
                      name: detailedErrors
                      wrapped: true
                xml:
                  name: error
        "405":
          description: Method Not Allowed
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 405
                  message:
                    type: string
                    example: Method Not Allowed
                  detailedMessage:
                    type: string
                    example: Unavailable HTTP method.
                xml:
                  name: error
        "414":
          description: Request-URI Too Large
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 414
                  message:
                    type: string
                    example: Request-URI Too Large
                  detailedMessage:
                    type: string
                    example: URI limits check failed.
                xml:
                  name: error
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
                  detailedMessage:
                    type: string
                    example: Internal Server Error.
                xml:
                  name: error
        "503":
          description: Service unavailable
          content:
            application/json:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
            application/xml:
              schema:
                type: object
                properties:
                  httpCode:
                    type: integer
                    format: int64
                    example: 503
                  message:
                    type: string
                    example: Service Unavailable
                  detailedMessage:
                    type: string
                    example: Service Unavailable.
                xml:
                  name: error
  /order/inventory:
    get:
      tags:
      - order
      summary: Returns products inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
      - api_key: []
  /order/order:
    post:
      tags:
      - order
      summary: Place an order for a products
      description: Place a new order in the order
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                petId:
                  type: integer
                  format: int64
                  example: 198772
                quantity:
                  type: integer
                  format: int32
                  example: 7
                shipDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  description: Order Status
                  example: approved
                  enum:
                  - placed
                  - approved
                  - delivered
                complete:
                  type: boolean
              xml:
                name: order
          application/xml:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                petId:
                  type: integer
                  format: int64
                  example: 198772
                quantity:
                  type: integer
                  format: int32
                  example: 7
                shipDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  description: Order Status
                  example: approved
                  enum:
                  - placed
                  - approved
                  - delivered
                complete:
                  type: boolean
              xml:
                name: order
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                petId:
                  type: integer
                  format: int64
                  example: 198772
                quantity:
                  type: integer
                  format: int32
                  example: 7
                shipDate:
                  type: string
                  format: date-time
                status:
                  type: string
                  description: Order Status
                  example: approved
                  enum:
                  - placed
                  - approved
                  - delivered
                complete:
                  type: boolean
              xml:
                name: order
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  petId:
                    type: integer
                    format: int64
                    example: 198772
                  quantity:
                    type: integer
                    format: int32
                    example: 7
                  shipDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                    description: Order Status
                    example: approved
                    enum:
                    - placed
                    - approved
                    - delivered
                  complete:
                    type: boolean
                xml:
                  name: order
        "405":
          description: Invalid input
  /order/order/{orderId}:
    get:
      tags:
      - order
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
      - name: orderId
        in: path
        description: ID of order that needs to be fetched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  petId:
                    type: integer
                    format: int64
                    example: 198772
                  quantity:
                    type: integer
                    format: int32
                    example: 7
                  shipDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                    description: Order Status
                    example: approved
                    enum:
                    - placed
                    - approved
                    - delivered
                  complete:
                    type: boolean
                xml:
                  name: order
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  petId:
                    type: integer
                    format: int64
                    example: 198772
                  quantity:
                    type: integer
                    format: int32
                    example: 7
                  shipDate:
                    type: string
                    format: date-time
                  status:
                    type: string
                    description: Order Status
                    example: approved
                    enum:
                    - placed
                    - approved
                    - delivered
                  complete:
                    type: boolean
                xml:
                  name: order
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
    delete:
      tags:
      - order
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be deleted
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
  /order-item:
    post:
      tags:
      - order-item
      summary: Create order-item
      description: This can only be done by the logged in order-item.
      operationId: createUser
      requestBody:
        description: Created order-item object
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
          application/xml:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
  /order-item/createWithList:
    post:
      tags:
      - order-item
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
        default:
          description: successful operation
  /order-item/login:
    get:
      tags:
      - order-item
      summary: Logs order-item into the system
      description: ""
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The order-item name for login
        required: false
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the order-item
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /order-item/logout:
    get:
      tags:
      - order-item
      summary: Logs out current logged in order-item session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /order-item/{username}:
    get:
      tags:
      - order-item
      summary: Get order-item by order-item name
      description: ""
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: 'The name that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
            application/xml:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    example: 10
                  username:
                    type: string
                    example: theUser
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: James
                  email:
                    type: string
                    example: john@email.com
                  password:
                    type: string
                    example: "12345"
                  phone:
                    type: string
                    example: "12345"
                  userStatus:
                    type: integer
                    description: User Status
                    format: int32
                    example: 1
                xml:
                  name: order-item
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - order-item
      summary: Update order-item
      description: This can only be done by the logged in order-item.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be deleted
        required: true
        schema:
          type: string
      requestBody:
        description: Update an existent order-item in the order
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
          application/xml:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
      responses:
        default:
          description: successful operation
    delete:
      tags:
      - order-item
      summary: Delete order-item
      description: This can only be done by the logged in order-item.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    "400":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 400
        message:
          type: string
          example: Bad Request
        detailedMessage:
          type: string
          example: Bad Request.
        detailedErrors:
          type: array
          items:
            type: string
            example: Name is mandatory
            xml:
              name: detailedError
          xml:
            name: detailedErrors
            wrapped: true
    "404":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 404
        message:
          type: string
          example: Not Found
        detailedMessage:
          type: string
          example: Resource not found.
    "405":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 405
        message:
          type: string
          example: Method Not Allowed
        detailedMessage:
          type: string
          example: Unavailable HTTP method.
    "406":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 406
        message:
          type: string
          example: Request Not Acceptable
        detailedMessage:
          type: string
          example: Requested content type not acceptable.
    "413":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 413
        message:
          type: string
          example: Request Entity Too Large
        detailedMessage:
          type: string
          example: Payload limits check failed.
    "414":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 414
        message:
          type: string
          example: Request-URI Too Large
        detailedMessage:
          type: string
          example: URI limits check failed.
    "415":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 415
        message:
          type: string
          example: Unsupported Media Type
        detailedMessage:
          type: string
          example: Unsupported Media Type.
    "500":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 500
        message:
          type: string
          example: Internal Server Error
        detailedMessage:
          type: string
          example: Internal Server Error.
    "503":
      type: object
      properties:
        httpCode:
          type: integer
          format: int64
          example: 503
        message:
          type: string
          example: Service Unavailable
        detailedMessage:
          type: string
          example: Service Unavailable.
    ProductRequest:
      required:
      - name
      - quantity
      - price
      type: object
      properties:
        name:
          type: string
          example: tv
        description:
          type: string
          example: television
        quantity:
          type: integer
          format: int64
          example: 5
        price:
          type: number
          format: double
          example: 100
      xml:
        name: product
    ProductResponse:
      required:
      - name
      - quantity
      - price
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: tv
        description:
          type: string
          example: television
        quantity:
          type: integer
          format: int64
          example: 5
        price:
          type: number
          format: double
          example: 100
      xml:
        name: product
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
          - placed
          - approved
          - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            type: object
            properties:
              street:
                type: string
                example: 437 Lytton
              city:
                type: string
                example: Palo Alto
              state:
                type: string
                example: CA
              zip:
                type: string
                example: "94301"
            xml:
              name: address
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: "94301"
      xml:
        name: address
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: order-item
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    ProductRequestBody:
      description: Product object for requests
      content:
        application/json:
          schema:
            required:
            - name
            - quantity
            - price
            type: object
            properties:
              name:
                type: string
                example: tv
              description:
                type: string
                example: television
              quantity:
                type: integer
                format: int64
                example: 5
              price:
                type: number
                format: double
                example: 100
            xml:
              name: product
        application/xml:
          schema:
            required:
            - name
            - quantity
            - price
            type: object
            properties:
              name:
                type: string
                example: tv
              description:
                type: string
                example: television
              quantity:
                type: integer
                format: int64
                example: 5
              price:
                type: number
                format: double
                example: 100
            xml:
              name: product
    UserArray:
      description: List of order-item object
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 10
                username:
                  type: string
                  example: theUser
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: James
                email:
                  type: string
                  example: john@email.com
                password:
                  type: string
                  example: "12345"
                phone:
                  type: string
                  example: "12345"
                userStatus:
                  type: integer
                  description: User Status
                  format: int32
                  example: 1
              xml:
                name: order-item
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 400
              message:
                type: string
                example: Bad Request
              detailedMessage:
                type: string
                example: Bad Request.
              detailedErrors:
                type: array
                items:
                  type: string
                  example: Name is mandatory
                  xml:
                    name: detailedError
                xml:
                  name: detailedErrors
                  wrapped: true
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 400
              message:
                type: string
                example: Bad Request
              detailedMessage:
                type: string
                example: Bad Request.
              detailedErrors:
                type: array
                items:
                  type: string
                  example: Name is mandatory
                  xml:
                    name: detailedError
                xml:
                  name: detailedErrors
                  wrapped: true
            xml:
              name: error
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 404
              message:
                type: string
                example: Not Found
              detailedMessage:
                type: string
                example: Resource not found.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 404
              message:
                type: string
                example: Not Found
              detailedMessage:
                type: string
                example: Resource not found.
            xml:
              name: error
    "405":
      description: Method Not Allowed
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 405
              message:
                type: string
                example: Method Not Allowed
              detailedMessage:
                type: string
                example: Unavailable HTTP method.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 405
              message:
                type: string
                example: Method Not Allowed
              detailedMessage:
                type: string
                example: Unavailable HTTP method.
            xml:
              name: error
    "406":
      description: Not Acceptable
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 406
              message:
                type: string
                example: Request Not Acceptable
              detailedMessage:
                type: string
                example: Requested content type not acceptable.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 406
              message:
                type: string
                example: Request Not Acceptable
              detailedMessage:
                type: string
                example: Requested content type not acceptable.
            xml:
              name: error
    "413":
      description: Request Entity Too Large
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 413
              message:
                type: string
                example: Request Entity Too Large
              detailedMessage:
                type: string
                example: Payload limits check failed.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 413
              message:
                type: string
                example: Request Entity Too Large
              detailedMessage:
                type: string
                example: Payload limits check failed.
            xml:
              name: error
    "414":
      description: Request-URI Too Large
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 414
              message:
                type: string
                example: Request-URI Too Large
              detailedMessage:
                type: string
                example: URI limits check failed.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 414
              message:
                type: string
                example: Request-URI Too Large
              detailedMessage:
                type: string
                example: URI limits check failed.
            xml:
              name: error
    "415":
      description: Unsupported Media Type
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 415
              message:
                type: string
                example: Unsupported Media Type
              detailedMessage:
                type: string
                example: Unsupported Media Type.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 415
              message:
                type: string
                example: Unsupported Media Type
              detailedMessage:
                type: string
                example: Unsupported Media Type.
            xml:
              name: error
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 500
              message:
                type: string
                example: Internal Server Error
              detailedMessage:
                type: string
                example: Internal Server Error.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 500
              message:
                type: string
                example: Internal Server Error
              detailedMessage:
                type: string
                example: Internal Server Error.
            xml:
              name: error
    "503":
      description: Service unavailable
      content:
        application/json:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 503
              message:
                type: string
                example: Service Unavailable
              detailedMessage:
                type: string
                example: Service Unavailable.
        application/xml:
          schema:
            type: object
            properties:
              httpCode:
                type: integer
                format: int64
                example: 503
              message:
                type: string
                example: Service Unavailable
              detailedMessage:
                type: string
                example: Service Unavailable.
            xml:
              name: error
    ProductsResponseBody:
      description: Product object for requests
      content:
        application/json:
          schema:
            type: array
            items:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
        application/xml:
          schema:
            type: array
            items:
              required:
              - name
              - quantity
              - price
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 1
                name:
                  type: string
                  example: tv
                description:
                  type: string
                  example: television
                quantity:
                  type: integer
                  format: int64
                  example: 5
                price:
                  type: number
                  format: double
                  example: 100
              xml:
                name: product
            xml:
              name: products
              wrapped: true
    ProductResponseBody:
      description: Product object for requests
      content:
        application/json:
          schema:
            required:
            - name
            - quantity
            - price
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: tv
              description:
                type: string
                example: television
              quantity:
                type: integer
                format: int64
                example: 5
              price:
                type: number
                format: double
                example: 100
            xml:
              name: product
        application/xml:
          schema:
            required:
            - name
            - quantity
            - price
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              name:
                type: string
                example: tv
              description:
                type: string
                example: television
              quantity:
                type: integer
                format: int64
                example: 5
              price:
                type: number
                format: double
                example: 100
            xml:
              name: product
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
